// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	broker "goqueue/internal/broker"

	mock "github.com/stretchr/testify/mock"
)

// TopicStorage is an autogenerated mock type for the TopicStorage type
type TopicStorage struct {
	mock.Mock
}

// Flush provides a mock function with given fields: topic
func (_m *TopicStorage) Flush(topic *broker.Topic) error {
	ret := _m.Called(topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(*broker.Topic) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Load provides a mock function with given fields:
func (_m *TopicStorage) Load() *broker.Topic {
	ret := _m.Called()

	var r0 *broker.Topic
	if rf, ok := ret.Get(0).(func() *broker.Topic); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*broker.Topic)
		}
	}

	return r0
}

type mockConstructorTestingTNewTopicStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewTopicStorage creates a new instance of TopicStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTopicStorage(t mockConstructorTestingTNewTopicStorage) *TopicStorage {
	mock := &TopicStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
